#!/bin/sh

# chkconfig: 2345 20 80
# description: <(:summary spec)>

. /etc/init.d/functions

################################################################################
# Specific script configuration
# Change these as needed to run a specific nodejs program.
################################################################################
RUNUSER=<(:runuser spec)>
program=<(:name spec)>
jarfile=<(:name spec)>-<(:jar-version spec)>-standalone.jar
jar=/usr/local/lib/${program}/${jarfile}
conf=/etc/iplant-services/:/etc/${program}/
mainclass=<(:main spec)>

################################################################################

################################################################################
# Generic paths
# None of these should need to be changed to execute a nodejs script unless
# there is specific configuration that is needed for the script.
################################################################################
readonly piddir=/var/run/$program
readonly logdir=/var/log/$program
readonly SH=/bin/bash
readonly CLAVIN=/usr/local/bin/clavin

RETVAL=0


name_instance() {
	root="$1"

	if [ $# -gt 1 ] && [ -n $2 ]
	then
		instance=$2
		echo "${root}-$instance"
	else
		echo "$root"
	fi
}

mk_inst_disp_name() {
	name_instance "$program" $*
}

mk_launch_log() {
    name=$(name_instance launch $*)
    echo "$logdir/${name}.log"
}

mk_lockfile() {
    name=$(name_instance "$program" $*)
    echo "/var/lock/subsys/$name"
}

mk_pidfile() {
    name=$(name_instance "$program" $*)
    echo "$piddir/${name}.pid"
}

id_instance() {
	pidname="$1"

	echo "$pidfile" | sed 's/^'"$program"'-\{0,1\}\([0-9]*\).pid$/\1/'
}

start_instance() {
    if [ $# -gt 0 ] && [ -n $1 ]
    then
        id=$1
        opts="-D${program}.id=$id"
    fi

    name="$(mk_inst_disp_name $id)"
    launch_log="$(mk_launch_log $id)"
    lockfile="$(mk_lockfile $id)"
    pidfile="$(mk_pidfile $id)"

    rm -f $launch_log || failure "unable to remove $launch_log"

    echo -n $"Starting $name: "
    pushd / > /dev/null
    cmd="nohup java -cp .:${conf}:$jar $opts $mainclass < /dev/null &> $launch_log & echo \$! > $pidfile"
    runuser -m -s "$SH" -c "$cmd" $RUNUSER
    popd > /dev/null
    inst_ret_val=$?

    [ $inst_ret_val = 0 ] && success && touch "$lockfile"
    [ $inst_ret_val != 0 ] && failure
    echo

    return $inst_ret_val
}

start () {
    echo -n "Starting $program: "
    num_instances=$($CLAVIN get-props -s "$program" "$program".num-instances)
    RETVAL=$?

    if [ $RETVAL != 0 ]
    then
        return
    fi

    echo -ne "\r"

    if [ -z $num_instances ]
    then
	start_instance
	RETVAL=$?
    else
	for instance in $(seq $num_instances)
	do
	    start_instance $instance
	    inst_ret_val=$?
	    [ $inst_ret_val != 0 ] && RETVAL=$inst_ret_val
	done
    fi
}

stop () {
    for pidfile in $(ls "$piddir")
    do
    	instance=$(id_instance "$pidfile")
    	name=$(mk_inst_disp_name $instance)
    	echo -n $"Stopping $name: "
    	killproc -p "$piddir/$pidfile"
    	inst_retval=$?
    	[ $inst_retval = 0 ] && rm -rf "$(mk_lockfile $instance)" "$pidfile"
    	[ $inst_retval != 0 ] && RETVAL=$inst_retval
    	echo
    done
}

restart () {
    stop
    start
}

reload () {
    restart
}

force_reload () {
    restart
}

showstatus () {
    for pidfile in $(ls "$piddir")
    do
	instance=$(id_instance "$pidfile")
    	status -p "$piddir/$pidfile" "$(mk_inst_disp_name $instance)"
    done
}

showstatus_q () {
    showstatus >/dev/null 2>&1
}

case "$1" in
    start)
        start
    ;;

    stop)
        stop
    ;;

    restart)
        restart
    ;;

    reload)
        reload
    ;;

    force-reload)
        force_reload
    ;;

    status)
        showstatus
    ;;

    condrestart|try-restart)
        showstatus_q || exit 0
        restart
    ;;

    *)
        echo "Usage: $program {start|stop|restart|reload|force-reload|status|condrestart|try-restart}"
        exit 1
    ;;
esac

exit $RETVAL
