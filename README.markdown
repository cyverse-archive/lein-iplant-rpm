# Leiningen Plugin for Generating RPMs

This is a leiningen plugin that can be used to generate RPM files for
stand-alone services at iPlant.  These services are installed in the
directory, /usr/local/lib/{project-name}, with an init.d script added to
/etc/init.d.  Upon installation, the service is configured to automatically
start at run levels 2, 3, 4 and 5.

*Note:* the RPM files generated by this plugin are specific to iPlant.  This
plugin will have to be modified to work anywhere else.

## Leiningen 2 Compatibility

This plugin is not currently compatible with Leiningen 2.  Compatibility will
be added in a future release.

## Usage

This plugin is stored in iPlant's Archiva repository, which will have to be
defined in `project.clj`:

```clojure
:repositories {"iplantCollaborative"
               "http://projects.iplantcollaborative.org/archiva/repository/internal/"}
```

Next, the plugin has to be added to the `dev-dependencies` section of
`project.clj`:

```clojure
[org.iplantc/lein-iplant-rpm "1.0.0-SNAPSHOT"]
```

Finally, a configuration section needs to be added to `project.clj` in order
to control how the RPM is generated:

```clojure
  :iplant-rpm {:summary "project summary"
               :release 1
               :provides "some name"
               :dependencies ["some-dependency >= some.version"]
               :config-files ["some.file" "someother.file"]
               :config-path "conf"}
```

Here's an example configuration file for one of iPlant's web services:

```clojure
(defproject conrad "1.1.0-SNAPSHOT"
  :description "Back-End Services for the iPlant Administrative Console"
  :dependencies [[org.clojure/clojure "1.3.0"]
                 [org.clojure/data.json "0.1.1"]
                 [org.clojure/tools.logging "0.2.3"]
                 [org.clojure/java.jdbc "0.1.0"]
                 [org.iplantc/clojure-commons "1.1.0-SNAPSHOT"]
                 [compojure "1.0.1"]
                 [swank-clojure "1.4.0-SNAPSHOT"]
                 [log4j/log4j "1.2.16"]
                 [postgresql/postgresql "9.0-801.jdbc4"]
                 [c3p0/c3p0 "0.9.1.2"]
                 [ring/ring-jetty-adapter "1.0.1"]]
  :dev-dependencies [[org.iplantc/lein-iplant-rpm "1.0.0-SNAPSHOT"]
                     [lein-ring "0.4.5"]
                     [swank-clojure "1.4.0-SNAPSHOT"]]
  :extra-classpath-dirs ["conf/test"]
  :aot [conrad.core]
  :main conrad.core
  :ring {:handler conrad.core/app :init conrad.core/load-configuration}
  :iplant-rpm {:summary "iPlant Conrad"
               :release 1
               :provides "conrad"
               :dependencies ["iplant-service-config >= 0.1.0-4"]
               :config-files ["log4j.properties"]
               :config-path "conf/main"}
  :repositories {"iplantCollaborative"
                 "http://projects.iplantcollaborative.org/archiva/repository/internal/"})
```

## Configuration Settings

Many of the configuration settings for lein-iplant-rpm come from the project
definition itself.  In cases where the configuration settings can't be
obtained from the project definitions or it may be helpful to override the
setting from the project definition, the configuration setting is made
available in the `iplant-rpm` section of `project.clj`.  The configuration
settings are described in detail below.

### Summary

The summary, which is used as the value of the `Summary` tag of the RPM
specification file, is specified using the `:summary` key in the `:iplant-rpm`
configuration settings.  This should contain a brief description of what is
contained in the RPM.

### Name

The RPM name is obtained directly from the project name (the first argument to
the `defproject` macro).  This field is used as the value of the `Name` tag in
the RPM specification file, which is then used as part of the `BuildRoot` tag,
part of the name of the source tarball, and the names of several other files
and directories.  This value is also used as the name of the init.d script and
part of the name of the RPM specification file.

### Version

The version string is obtained from the portion of the project version (the
second argument to the `defproject` macro) prior to the first hyphen.  For
example, if the version string in the project file is `1.0.0-SNAPSHOT`, the
version string in this configuration setting is `1.0.0`.  This field is used
as the value of the `Version` tag in the RPM specification file, which is used
as part of the value of the `BuildRoot` tag, part of the name of the source
tarball, and in the names of several other files and directories.

### Release

The release number is configured in the `:release` attribute of the
`:iplant-rpm` configuration settings.  The value of this setting is used as
the value of the `Release` tag in the RPM specification file.

### Provides

The name of the package that the RPM provides is configured in the `:provides`
attribute of the `:iplant-rpm` configuration settings.  The value of this
setting is used as the value of the `Provides` tag in the RPM specification
file.

### Dependencies

The dependencies that this setting refers to here are the RPM dependencies
rather than the JVM dependencies, which are automatically packaged in the JAR
file.  These dependencies are configured in the `:dependencies` attribute of
the `iplant-rpm` configuration settings, which contains a vector of strings.
Each string in this vector represents the name of the required RPM and any
version number requirements associated with that RPM.

### Description

The RPM description is obtained directly from the project description in
`project.clj`, and is used as the value of the `%description` tag in the RPM
specification file.

### JAR Version Number

The JAR version string is obtained directly from the project version (the
second project to the `defproject` macro.  This version number contains the
full version string rather than just the portion of the string prior to the
first hyphen.  This value is used to build the name of the JAR file in the
`%install` section of the RPM specification file.  It's also used to build the
name of the JAR file that is being used in the init.d script.

### Configuration Files

Any configuration files that are rquired by the service may be specified using
the `:config-files` attribute of the `:iplant-rpm` configuration settings.
This setting contains only the names of the configuration files, not the full
paths to the files.  This setting is used in conjunction with the
`:config-path` setting to generate portions of the `%install` and `%files`
sections of the RPM specification file.

### Configuration Path

The path to the directory containing the configuration files, relative to the
directory containing `project.clj` is specified using the `:config-path`
attribute of the `:iplant-rpm` configuration settings.  This setting is used
in conjunction with the `:config-files` setting to generate portions of the
`%install` and `%files` sections of the RPM specification file.

### Extra Classpath Directories

This setting is obtained directly from the `:extra-classpath-dirs` setting in
`project.clj`.  This setting is not used in the RPM specification or the
init.d script, but it is used to determine if any additional directories need
to be included in the source tarball.
